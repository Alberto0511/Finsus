import React, { useState, useEffect } from 'react';


// Definición de las constantes proporcionadas
const Catalogs = {
  catTerm: [
    {
      value: 1,
      label: "7 días",
      rate: 10.06,
      periodYear: 1,
      catView: [1, 3],
      contributions: 0,
    },
    {
      value: 2,
      label: "1 mes",
      rate: 11.09,
      periodYear: 1,
      catView: [3],
      contributions: 1,
    },
    {
      value: 3,
      label: "3 meses",
      rate: 12.09,
      periodYear: 1,
      catView: [2, 3],
      contributions: 3,
    },
    {
      value: 4,
      label: "6 meses",
      rate: 12.29,
      periodYear: 1,
      catView: [2, 3],
      contributions: 6,
    },
    {
      value: 5,
      label: "12 meses",
      rate: 14.09,
      periodYear: 1,
      catView: [2, 3],
      contributions: 12,
    },
    {
      value: 6,
      label: "2 años",
      rate: 14.55,
      periodYear: 2,
      catView: [2, 3],
      contributions: 24,
    },
    {
      value: 7,
      label: "3 años",
      rate: 15.01,
      periodYear: 3,
      catView: [2, 3],
      contributions: 36,
    },
    {
      value: 8,
      label: "4 años",
      rate: 13.25,
      periodYear: 4,
      catView: [2, 3],
      contributions: 48,
    },
    {
      value: 9,
      label: "5 años",
      rate: 12.75,
      periodYear: 5,
      catView: [2, 3],
      contributions: 60,
    },
  ],
  catPaymentType: [
    {
      keyOptionCat: 1,
      value: 1,
      label: "Semanal",
      alertLabel: "El interés semanal solo aplica para inversiones a 7 días",
      paymentType: 52,
    },
    {
      keyOptionCat: 2,
      value: 2,
      label: "Mensual",
      alertLabel:
        "Si consideras sólo los intereses del monto inicial, no podrías realizar interés compuesto debido a que el monto mínimo de inversión es de $100, sin embargo si realizas inversiones recurrentes por $100 o más, estarías generando interés compuesto por un monto mayor al calculado inicialmente",
      paymentType: 12,
    },
    {
      keyOptionCat: 3,
      value: 3,
      label: "Al vencimiento",
      alertLabel:
        "Con pago de intereses al vencimiento no es posible calcular interés compuesto",
      paymentType: 1,
    },
  ],
  catCompositeLegend: [
    {
      value: 1,
      key: "Si aplica",
      label:
        "Considerando sólo los rendimientos mensuales de tu inversión, podrías generar nuevas inversiones para realizar interés compuesto",
    },
    {
      value: 2,
      key: "No aplica",
      label:
        "Si consideras sólo los intereses del monto inicial, no podrías realizar interés compuesto debido a que el monto mínimo de inversión es de $100, sin embargo si realizas inversiones recurrentes por $100 o más, estarías generando interés compuesto por un monto mayor al calculado inicialmente",
    },
  ],
};

// Función para formatear números a formato de moneda
const formatNumber = (num) => {
  return new Intl.NumberFormat('es-ES', { style: 'currency', currency: 'USD' }).format(num);
};


const InterestCalculator = () => {
  useEffect(() => {
    document.body.classList.add("Summary");
    return () => {
      document.body.classList.remove("Summary");
    };
  }, []);

  // Estado para los campos del formulario
  const [formValues, setFormValues] = useState({
    startingAmount: '',
    Term: '',
    PaymentType: '',
    NumberOfPayments: '',
  });

  const [result, setResult] = useState(null);
  const [errors, setErrors] = useState({});

  // Función para manejar cambios en los campos del formulario
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormValues(prevState => ({
      ...prevState,
      [name]: value,
    }));
  };

  // Filtrar las opciones de PaymentType basado en el término seleccionado
  const getFilteredPaymentTypes = () => {
    if (formValues.Term === '1') { // '7 días' tiene value: 1
      return Catalogs.catPaymentType.filter(pt => pt.value === 1 || pt.value === 3);
    }
    // Para otros términos, mostrar todas las opciones
    return Catalogs.catPaymentType;
  };

  // Verificar si el campo de Depósito Mensual debe mostrarse
  const shouldShowNumberOfPayments = () => {
    return formValues.Term !== '1'; // Ocultar si es '7 días'
  };

  // Validar el formulario
  const validate = () => {
    let tempErrors = {};
    if (!formValues.startingAmount) {
      tempErrors.startingAmount = "Este campo es requerido";
    } else if (isNaN(formValues.startingAmount) || Number(formValues.startingAmount) < 0) {
      tempErrors.startingAmount = "Por favor, ingresa un número válido";
    }

    if (!formValues.Term) {
      tempErrors.Term = "Este campo es requerido";
    }

    if (!formValues.PaymentType) {
      tempErrors.PaymentType = "Este campo es requerido";
    }

    if (shouldShowNumberOfPayments()) {
      if (!formValues.NumberOfPayments) {
        tempErrors.NumberOfPayments = "Este campo es requerido";
      } else if (isNaN(formValues.NumberOfPayments) || Number(formValues.NumberOfPayments) < 0) {
        tempErrors.NumberOfPayments = "Por favor, ingresa un número válido";
      }
    }

    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  // Función para calcular el valor futuro usando la fórmula proporcionada
  const calculateFutureValue = (rate, nper, pmt, pv, type) => {
    if (rate === 0) return -(pv + pmt * nper);
    const pow = Math.pow(1 + rate, nper);
    return pv * pow + (pmt * (1 + rate * type) * (pow - 1)) / rate;
  };

  // Función para calcular los datos finales
  const calculateData = () => {
    const startingAmount = parseFloat(formValues.startingAmount) || 0;
    const numberOfPayments = parseFloat(formValues.NumberOfPayments) || 0;

    // Encontrar los detalles del término seleccionado
    const term = Catalogs.catTerm.find(t => t.value === parseInt(formValues.Term));
    if (!term) {
      setErrors({ general: "Selecciona un plazo válido." });
      return;
    }

    // Encontrar los detalles del tipo de pago seleccionado
    const paymentType = Catalogs.catPaymentType.find(p => p.value === parseInt(formValues.PaymentType));
    if (!paymentType) {
      setErrors({ general: "Selecciona un tipo de pago válido." });
      return;
    }

    const annualInterestRate = term.rate;
    const numberAplique = paymentType.paymentType; // Número de períodos por año
    const numberYears = term.periodYear;

    // Tasa de interés por período
    const ratePerPeriod = annualInterestRate / 100 / numberAplique;
    // Total períodos
    const totalPeriods = numberAplique * numberYears;

    // Calcular el valor futuro
    const futureValue = Math.abs(
      calculateFutureValue(
        ratePerPeriod,
        totalPeriods,
        shouldShowNumberOfPayments() ? -numberOfPayments : 0,
        -startingAmount,
        1
      )
    );

    // Calcular intereses generados
    const interestGenerated = Math.abs(futureValue - startingAmount - (shouldShowNumberOfPayments() ? (numberOfPayments * totalPeriods) : 0));

    // Formatear los resultados
    const futureValueFormatted = formatNumber(futureValue);

    return {
      futureValue: futureValueFormatted,
      interestGenerated: formatNumber(interestGenerated),
    };
  };

  // Manejar el envío del formulario
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) {
      return;
    }

    const data = calculateData();
    if (data) {
      setResult(data.futureValue);
    }
  };

  // Resetear PaymentType y NumberOfPayments si Term cambia a '7 días'
  useEffect(() => {
    if (formValues.Term === '1') { // '7 días'
      setFormValues(prevState => ({
        ...prevState,
        PaymentType: '',
        NumberOfPayments: '',
      }));
      setErrors(prevErrors => ({
        ...prevErrors,
        PaymentType: '',
        NumberOfPayments: '',
      }));
    }
  }, [formValues.Term]);

  return (
    <div className="interest-calculator">
      <h2>Calculadora de Interés Compuesto</h2>
      <form onSubmit={handleSubmit}>
        {/* Monto Inicial */}
        <div className="form-group">
          <label htmlFor="startingAmount">Ingresa con cuánto dinero podrías hacer tu primera inversión:</label>
          <input
            type="number"
            id="startingAmount"
            name="startingAmount"
            placeholder="Ingrese cantidad inicial"
            value={formValues.startingAmount}
            onChange={handleChange}
            className="form-control"
          />
          {errors.startingAmount && (
            <span className="error">{errors.startingAmount}</span>
          )}
        </div>

        {/* Término */}
        <div className="form-group">
          <label htmlFor="Term">Selecciona el tiempo que estará invertido tu dinero:</label>
          <select
            id="Term"
            name="Term"
            value={formValues.Term}
            onChange={handleChange}
            className="form-control"
          >
            <option value="">Seleccione una opción</option>
            {Catalogs.catTerm.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
          {errors.Term && (
            <span className="error">{errors.Term}</span>
          )}
        </div>

        {/* Tipo de Pago */}
        <div className="form-group">
          <label htmlFor="PaymentType">Elije cómo recibir el pago de rendimientos:</label>
          <select
            id="PaymentType"
            name="PaymentType"
            value={formValues.PaymentType}
            onChange={handleChange}
            className="form-control"
          >
            <option value="">Seleccione una opción</option>
            {getFilteredPaymentTypes().map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
          {errors.PaymentType && (
            <span className="error">{errors.PaymentType}</span>
          )}
        </div>

        {/* Depósito Mensual */}
        {shouldShowNumberOfPayments() && (
          <div className="form-group">
            <label htmlFor="NumberOfPayments">¿Cuánto le vas a depositar al mes?</label>
            <input
              type="number"
              id="NumberOfPayments"
              name="NumberOfPayments"
              placeholder="Ingrese depósito mensual"
              value={formValues.NumberOfPayments}
              onChange={handleChange}
              className="form-control"
            />
            {errors.NumberOfPayments && (
              <span className="error">{errors.NumberOfPayments}</span>
            )}
          </div>
        )}

        {/* Errores Generales */}
        {errors.general && (
          <div className="error general-error">{errors.general}</div>
        )}

        {/* Botón de Calcular */}
        <button type="submit" className="btn">Calcular</button>
      </form>

      {/* Resultado */}
      {result && (
        <div className="result">
          <h3>Con Interés Compuesto tendrías:</h3>
          <p><strong>{result}</strong></p>
        </div>
      )}
    </div>
  );
};

export default InterestCalculator;


